// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForInsertFollows implements pgx.CopyFromSource.
type iteratorForInsertFollows struct {
	rows                 []InsertFollowsParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertFollows) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertFollows) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].FollowerID,
		r.rows[0].FollowingID,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForInsertFollows) Err() error {
	return nil
}

func (q *Queries) InsertFollows(ctx context.Context, arg []InsertFollowsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"follows"}, []string{"follower_id", "following_id", "created_at"}, &iteratorForInsertFollows{rows: arg})
}

// iteratorForInsertLikes implements pgx.CopyFromSource.
type iteratorForInsertLikes struct {
	rows                 []InsertLikesParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertLikes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertLikes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PostID,
		r.rows[0].UserID,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForInsertLikes) Err() error {
	return nil
}

func (q *Queries) InsertLikes(ctx context.Context, arg []InsertLikesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"likes"}, []string{"post_id", "user_id", "created_at"}, &iteratorForInsertLikes{rows: arg})
}

// iteratorForInsertPosts implements pgx.CopyFromSource.
type iteratorForInsertPosts struct {
	rows                 []InsertPostsParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertPosts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertPosts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Content,
		r.rows[0].AuthorID,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForInsertPosts) Err() error {
	return nil
}

func (q *Queries) InsertPosts(ctx context.Context, arg []InsertPostsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"posts"}, []string{"content", "author_id", "created_at"}, &iteratorForInsertPosts{rows: arg})
}

// iteratorForInsertUsers implements pgx.CopyFromSource.
type iteratorForInsertUsers struct {
	rows                 []InsertUsersParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertUsers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Email,
		r.rows[0].Username,
		r.rows[0].PasswordHash,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
	}, nil
}

func (r iteratorForInsertUsers) Err() error {
	return nil
}

func (q *Queries) InsertUsers(ctx context.Context, arg []InsertUsersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"users"}, []string{"email", "username", "password_hash", "created_at", "updated_at"}, &iteratorForInsertUsers{rows: arg})
}
