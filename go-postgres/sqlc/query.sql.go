// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const followUser = `-- name: FollowUser :exec
INSERT INTO follows(follower_id, following_id)
    VALUES ($1, $2)
`

type FollowUserParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

// follower_id "follows" following_id
func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.Exec(ctx, followUser, arg.FollowerID, arg.FollowingID)
	return err
}

const getAllPostIDs = `-- name: GetAllPostIDs :many
SELECT
    id
FROM
    posts
`

func (q *Queries) GetAllPostIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllPostIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserIDs = `-- name: GetAllUserIDs :many
SELECT
    id
FROM
    users
`

func (q *Queries) GetAllUserIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllUserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowers = `-- name: GetFollowers :many
SELECT
    username
FROM
    users
WHERE
    id IN (
        SELECT
            follower_id
        FROM
            follows
        WHERE
            following_id = $1
        ORDER BY
            created_at DESC)
`

// this query returns people who follow you
func (q *Queries) GetFollowers(ctx context.Context, followingID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getFollowers, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT
    username
FROM
    users
WHERE
    id IN (
        SELECT
            following_id
        FROM
            follows
        WHERE
            follower_id = $1
        ORDER BY
            created_at DESC)
`

// this query returns people you follow
func (q *Queries) GetFollowing(ctx context.Context, followerID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT
    p.content,
    p.author_id,
    p.created_at,
(
        SELECT
            username
        FROM
            users u
        WHERE
            u.id = p.author_id) AS username,
(
        SELECT
            count(*)
        FROM
            likes l
        WHERE
            l.post_id = p.id) AS like_count
FROM
    posts p
WHERE
    p.id = $1
`

type GetPostRow struct {
	Content   string             `json:"content"`
	AuthorID  int32              `json:"author_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Username  string             `json:"username"`
	LikeCount int64              `json:"like_count"`
}

func (q *Queries) GetPost(ctx context.Context, id int32) (GetPostRow, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.Username,
		&i.LikeCount,
	)
	return i, err
}

const getUserForAuth = `-- name: GetUserForAuth :one
SELECT
    id,
    password_hash
FROM
    users
`

type GetUserForAuthRow struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) GetUserForAuth(ctx context.Context) (GetUserForAuthRow, error) {
	row := q.db.QueryRow(ctx, getUserForAuth)
	var i GetUserForAuthRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const getUserForProfile = `-- name: GetUserForProfile :one
WITH FOLLOWING AS (
    SELECT
        following_id
    FROM
        follows
    WHERE
        follower_id = $1
)
SELECT
    id,
    username,
    created_at,
(
        SELECT
            count(*)
        FROM
            follows f
        WHERE
            f.following_id = $1) AS following_count,
(
        SELECT
            ARRAY_AGG(username)
        FROM
            users
        WHERE
            id IN (
                SELECT
                    following_id
                FROM
                    FOLLOWING
                LIMIT 3)) AS followers_you_know,
(
        SELECT
            count(*)
        FROM
            users
        WHERE
            id IN (
                SELECT
                    following_id
                FROM
                    FOLLOWING)) AS followers_you_know_count,
(
        SELECT
            count(*)
        FROM
            posts
        WHERE
            author_id = $1) AS post_count
FROM
    users
WHERE
    id = $1
`

type GetUserForProfileRow struct {
	ID                    int32              `json:"id"`
	Username              string             `json:"username"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	FollowingCount        int64              `json:"following_count"`
	FollowersYouKnow      interface{}        `json:"followers_you_know"`
	FollowersYouKnowCount int64              `json:"followers_you_know_count"`
	PostCount             int64              `json:"post_count"`
}

func (q *Queries) GetUserForProfile(ctx context.Context, followingID int32) (GetUserForProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserForProfile, followingID)
	var i GetUserForProfileRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.FollowingCount,
		&i.FollowersYouKnow,
		&i.FollowersYouKnowCount,
		&i.PostCount,
	)
	return i, err
}

type InsertFollowsParams struct {
	FollowerID  int32              `json:"follower_id"`
	FollowingID int32              `json:"following_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type InsertLikesParams struct {
	PostID    int32              `json:"post_id"`
	UserID    int32              `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

const insertPost = `-- name: InsertPost :exec
INSERT INTO posts(content, author_id)
    VALUES ($1, $2)
`

type InsertPostParams struct {
	Content  string `json:"content"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.Exec(ctx, insertPost, arg.Content, arg.AuthorID)
	return err
}

type InsertPostsParams struct {
	Content   string             `json:"content"`
	AuthorID  int32              `json:"author_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(email, username, password_hash)
    VALUES ($1, $2, $3)
`

type InsertUserParams struct {
	Email        string `json:"email"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Email, arg.Username, arg.PasswordHash)
	return err
}

type InsertUsersParams struct {
	Email        string             `json:"email"`
	Username     string             `json:"username"`
	PasswordHash string             `json:"password_hash"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

const likePost = `-- name: LikePost :exec
INSERT INTO likes(post_id, user_id)
    VALUES ($1, $2)
`

type LikePostParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) error {
	_, err := q.db.Exec(ctx, likePost, arg.PostID, arg.UserID)
	return err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows
WHERE follower_id = $1
    AND following_id = $2
`

type UnfollowUserParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

// follower_id "unfollows" following_id
func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.FollowerID, arg.FollowingID)
	return err
}

const unlikePost = `-- name: UnlikePost :exec
DELETE FROM likes
WHERE post_id = $1
    AND user_id = $2
`

type UnlikePostParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) error {
	_, err := q.db.Exec(ctx, unlikePost, arg.PostID, arg.UserID)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE
    users
SET
    email = $2
WHERE
    id = $1
`

type UpdateUserEmailParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}
