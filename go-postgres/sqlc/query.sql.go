// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlc

import (
	"context"
)

const getAllPostIDs = `-- name: GetAllPostIDs :many
SELECT
    id
FROM
    posts
`

func (q *Queries) GetAllPostIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllPostIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserIDs = `-- name: GetAllUserIDs :many
SELECT
    id
FROM
    users
`

func (q *Queries) GetAllUserIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllUserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertFollowsParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

type InsertLikesParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

type InsertPostsParams struct {
	Content  string `json:"content"`
	AuthorID int32  `json:"author_id"`
}

type InsertUsersParams struct {
	Email        string `json:"email"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

const truncateFollows = `-- name: TruncateFollows :exec
TRUNCATE TABLE follows RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateFollows(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateFollows)
	return err
}

const truncateLikes = `-- name: TruncateLikes :exec
TRUNCATE TABLE likes RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateLikes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateLikes)
	return err
}

const truncatePosts = `-- name: TruncatePosts :exec
TRUNCATE TABLE posts RESTART IDENTITY CASCADE
`

func (q *Queries) TruncatePosts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncatePosts)
	return err
}

const truncateUsers = `-- name: TruncateUsers :exec
TRUNCATE TABLE users RESTART IDENTITY CASCADE
`

func (q *Queries) TruncateUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateUsers)
	return err
}
